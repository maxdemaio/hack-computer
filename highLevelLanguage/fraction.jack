/** Provides the Fraction type and related services. */
class Fraction {
  field int numerator, denominator;
  
  /** Constructs a new (and reduced) fraction from given
  * numerator and denominator. */
  constructor Fraction new(int a, int b) {
    let numerator = a; let denominator = b;
    do reduce(); // If a/b is not reduced, reduce it
    return this;
  }
  /** Reduces this fraction. */
  method void reduce() {
    var int g;
    let g = Fraction.gcd(numerator, denominator);
    if (g > 1) {
    let numerator = numerator / g;
    let denominator = denominator / g; }
    return;
  }
  /** Computes the greatest common denominator of a and b. */
  function int gcd(int a, int b){
    var int r;
    while (~(b = 0)) { // Apply Euclidâ€™s algorithm.
    let r = a - (b * (a / b)); // r=remainder of a/b
    let a = b; let b = r; }
    return a;
  }
  /** Accessors. */
  method int getNumerator() { return numerator; }
  method int getDenominator() { return denominator; }

  /** Returns the sum of this fraction and another one. **/
  method Fraction plus(Fraction other){
    var int sum;
    let sum = (numerator * other.getDenominator()) +
    (other.getNumerator() * denominator());
    return Fraction.new(sum, denominator *
    other.getDenominator());
  }

  // More fraction-related methods: minus, times, div, etc.

  /** Prints this fraction. */
  method void print() {
    do Output.printInt(numerator);
    do Output.printString("/");
    do Output.printInt(denominator);
    return;
  }
}
